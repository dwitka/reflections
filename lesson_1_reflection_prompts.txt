How did viewing a diff between two versions of a file 
help you see the bug that was introduced?

  It produced only text that had differences between 
them in the two files allowing one to detect a typo
more efficiently.


How could having easy access to the entire history of 
a file make you a more efficient programmer in the 
long term?

    It would be more efficient in two ways: First, if
someone finds that their program is now not working 
then they can go back to a previous working version.
Second, they can compare a broken version with a 
working version by using a compare utility such as the
one available in the command prompt which allows for
comparison of chaged data only.


What do you think are the pros and cons of manually 
choosing when to create a commit, like you do in Git, 
vs having versions automatically saved, like Google 
docs does?

   The pros of making manual commits are based on the
judgement of the coder. If he/she understands what type
of changes call for a commit and is studeous then the
manual approach is better than automatic.
   The automatic approach can either make commits at the
wrong time or make to many unneccessary commits, but you
would have lots of revisions to choose from. 


Why do you think some version control systems, like 
Git, allow saving multiple files in one commit, while 
others, like Google Docs, treat each file separately?

   Sometimes files are related such as html and css 
files, and changing an html file might also mean that
it's respective css file must also be changed. Having
the new html file without its updated css file would 
give inconsistent results.  


How can you use the commands git log and git diff to 
view the history of files?

   The commands allow someone to view the changes made 
within a repository. 'git log' shows all repository commits
made and 'git' diff shows the changes made for each file
between two chosen repository commits.


How might using version control make you more confident 
to make changes that could break something?

  With version control any mistakes you make can always be
reversed, thus, anyone coding under version control would 
never have to worry about breaking their code.


Now that you have your workspace set up, what do you 
want to try using Git for?

   I intend to build an android application.